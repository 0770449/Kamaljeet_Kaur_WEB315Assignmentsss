@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<section>
<div class="form-group">
    <label for="username">
        Name:</label>
        <input id="username" placeholder="Enter username" @bind="userInput" />
</div>
</section>


<div class="form-group">
    <label for="msg">
        Message:
        <input id="msg" @bind="messageInput" size="50" @onfocus="Addfocus" @onblur="Removefocus" />
    </label>
</div>


<button @onclick="Send" disabled="@(!IsConnected)">Send </button>
<button @onclick="SendMsgToCaller" disabled="@(!IsConnected)">Send to others than me </button>
<hr>

<section>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
        <h2>@userisTyping</h2>
    }
</ul>
</section>
@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    private string userisTyping;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceivingMessageFromAUser", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            userInput="";
            messageInput="";
            StateHasChanged();
        });
         hubConnection.On<string>("ReceivingWhoIsTyping", (user) =>
        {
           
          var userisTyping  =  $"{user} is typing the message";
           messages.Add( userisTyping);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() =>
    await hubConnection.SendAsync("SendMessage", userInput, messageInput);
    async Task SendMsgToCaller() =>
    await hubConnection.SendAsync("ReceivingMessageFromAUser", userInput);
    async Task Addfocus() =>
    await hubConnection.SendAsync("Added the focus event", userInput);
    async Task Removefocus() =>
    await hubConnection.SendAsync("Applied the blur event", userInput);
    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}