@{
    if (AddFoodForm)
    {
        <h3>Add Food Items to an Isle</h3>
        <form>
            <section>             
                    <label for="foodName">Foodname</label>
                    <input type="text"   name="foodName" @bind="foodNameInputbox"><br/>
                    <label for="ProductionCountry">ProductionCountry</label>
                    <input type="text"  name="ProductionCountry" @bind="ProductionCountryInputbox"><br/>
                    <label for="Price"> Price</label>
                    <input type="number"  name="Price" @bind="PriceInputbox"><br/>
                    <label for="color">Color</label>
                    <input type="text"   name="color" @bind="ColorInputbox"><br/>
                    <label for="quantity">Quantity</label>
                    <input type="number"  min="0" max="20" name="quantity" @bind="quantityInputbox" required><br/>
                 
                <section> 
                      <label for="isleNumber">Isle number</label>
                      <input type="number" name="isleNumber" @bind="isleInputbox" required>
                </section><br/>
                <button type="button" @onclick="AddFood">Add food</button>
            </section>
      </form>
    }
}

@foreach (var isle in islesList)
{
    <h3>Isle number @isle.IsleNumber : @isle.IsleName</h3>      //display Isle number
    <table class="table table-hover">
        <thead>
        <tr>
            <th>FoodItem</th>
            <th>ProductionCountry</th>
            <th>Price</th>
            <th>Color</th>
            <th>Quantity</th>
            <th>Buttons</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var foodItem in isle.ListofFoodItems)
            {
                <tr>
                    <td>@foodItem.FoodName</td>
                    <td>@foodItem.ProductionCountry</td>
                    <td>@foodItem.Price</td>
                    <td>@foodItem.Color</td>
                    <td>@foodItem.Quantity</td>
                    <td>
                        <button class="btn btn-decrement" @onclick="() => DecreaseQnty(foodItem, isle.IsleNumber)">
                        <span class="oi oi-minus" aria-hidden="true"></span></button>  
                        <button class="btn btn-increment" @onclick="() => IncreaseQnty(foodItem, isle.IsleNumber)">
                        <span class="oi oi-plus" aria-hidden="true"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code
{   
    [Parameter]
    public bool AddFoodForm { get; set; }
    private string isleInputbox;
    private string foodNameInputbox;
    
    private string PriceInputbox;
    private string ProductionCountryInputbox;
    private string ColorInputbox;

    private string quantityInputbox;
    private List<GroceryIsle> islesList = new ()
        {
            new GroceryIsle("DairyProducts", 1, new List<FoodItem>()
            {
                
                new FoodItem {FoodName = "Milk", Quantity = 15, ProductionCountry = "Canada", Price = 4f, Color="White"},
                new FoodItem {FoodName = "Curd", Quantity = 5, ProductionCountry= "India", Price = 7f, Color="White"},
            }),
           
            new GroceryIsle("Sweets", 2, new List<FoodItem>()
            {
                new FoodItem {FoodName = "Gulab-jamun", Quantity = 17, ProductionCountry = "India", Price = 5.4f, Color="Brown"},
                new FoodItem {FoodName = "Ladoo", Quantity = 9, ProductionCountry = "India", Price = 4f, Color="Yellow"}
            }),
             new GroceryIsle("Drinks", 3, new List<FoodItem>()
            {
                new FoodItem {FoodName = "Mango-juice", Quantity = 13, ProductionCountry = "Canada", Price = 6f, Color="Yellow"},
                new FoodItem {FoodName = "Apple-juice", Quantity = 16, ProductionCountry = "Tirana", Price = 9.7f, Color="Red"}
            })
        };
// Make sure each food item has a quantity above 0 but below 20 set.
    private void IncreaseQnty (FoodItem foodItem, int isleNumber)
    {
        var groceryIsle = islesList.Find(isle => isle.IsleNumber == isleNumber);
        var groceryFood = groceryIsle.ListofFoodItems.Find(food => food.FoodName == foodItem.FoodName);

        if (groceryFood.Quantity >= 20) return;
 
        groceryFood.Quantity += 1;
    }
     private void DecreaseQnty (FoodItem foodItem, float isleNumber)
    {
        var groceryIsle = islesList.Find(isle => isle.IsleNumber == isleNumber);
        var groceryFood = groceryIsle.ListofFoodItems.Find(food => food.FoodName == foodItem.FoodName);

        if (groceryFood.Quantity <= 0) return;

        groceryFood.Quantity -= 1;
    }
     private void AddFood()
    {
        if (string.IsNullOrWhiteSpace(isleInputbox)) return;// checking for white space and is null
        if (string.IsNullOrWhiteSpace(foodNameInputbox)) return;
        if (string.IsNullOrWhiteSpace(ProductionCountryInputbox)) return;
        if (string.IsNullOrWhiteSpace(PriceInputbox)) return;
        if (string.IsNullOrWhiteSpace(quantityInputbox)) return;

        FoodItem newFoodItem = new FoodItem 
            {
                FoodName = foodNameInputbox,
                Quantity = float.Parse(quantityInputbox),
                ProductionCountry = ProductionCountryInputbox,
                Color = ColorInputbox,
                Price = float.Parse(PriceInputbox)
            };


        try
        {
            var isleToUpdate = islesList.Find(isle => isle.IsleNumber == decimal.Parse(isleInputbox));
            isleToUpdate.ListofFoodItems.Add(newFoodItem);
        }
        catch (Exception err)
        {
            throw err;
        }

        isleInputbox = "";//string empty
        foodNameInputbox = "";
        ProductionCountryInputbox = "";
        ColorInputbox = "";
        PriceInputbox = "";
        quantityInputbox = "";
    }

}